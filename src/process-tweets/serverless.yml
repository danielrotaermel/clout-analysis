service: clout-analysis-backend

frameworkVersion: '>=1.30.1'

stage: dev
region: eu-central-1

custom:
  twitter2kinesis-arn: 'arn:aws:kinesis:us-east-1:525842372805:stream/twitter' # specify your kinesis stream

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    PERIODIC_CLOUT_REPORTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-periodic-clout-reports
    TRUMPS_ENRICHED_TWEETS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-trumps-enriched-tweets
    OTHER_TWEETS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-other-tweets
    TRUMPS_TWEETS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-trumps-tweets

    # Watson tone analyzer
    toneAnalyzer_url: ${file(./serverless.env.yml):${self:provider.stage}.toneAnalyzer.url}
    toneAnalyzer_username: ${file(./serverless.env.yml):${self:provider.stage}.toneAnalyzer.username}
    toneAnalyzer_password: ${file(./serverless.env.yml):${self:provider.stage}.toneAnalyzer.password}

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
          #  permissions needed for stream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource:
        - Fn::GetAtt:
            - TrumpsTweetsDynamoDbTable
            - Arn
        - Fn::GetAtt:
            - OtherTweetsDynamoDbTable
            - Arn
        - Fn::GetAtt:
            - TrumpsEnrichedTweetsDynamoDbTable
            - Arn
        - Fn::GetAtt:
            - PeriodicCloutReportsDynamoDbTable
            - Arn
    - Effect: 'Allow'
      Action:
        - 'kinesis:*'
      Resource: ${self:custom.twitter2kinesis-arn}

functions:
  preprocess:
    handler: preprocess.preprocess
    events:
      - stream:
          type: kinesis
          arn: ${self:custom.twitter2kinesis-arn}
          batchSize: 300
          startingPosition: LATEST
          enabled: true

  postprocess:
    handler: postprocess.postprocess
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [TrumpsTweetsDynamoDbTable, StreamArn]
          batchSize: 1
          startingPosition: LATEST
          enabled: true

  periodicCloutReports:
    handler: periodicCloutReports.periodicCloutReports
    events:
      - schedule:
          name: enrichTweets
          description: 'runs every 20 minutes'
          rate: rate(10 minutes)
          enabled: true
    environment:
      schedule: 10

  # api
  getEnrichedTweets:
    handler: api/get.getEnrichedTweets
    events:
      - http:
          path: enriched-tweets/{day}
          method: get
          cors: true

  getReports:
    handler: api/get.getReports
    events:
      - http:
          path: reports/{day}
          method: get
          cors: true

resources:
  Resources:
    TrumpsTweetsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: day
            AttributeType: S
          - AttributeName: timestamp_ms
            AttributeType: S
        KeySchema:
          - AttributeName: day
            KeyType: HASH
          - AttributeName: timestamp_ms
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TRUMPS_TWEETS_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    OtherTweetsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: day
            AttributeType: S
          - AttributeName: timestamp_ms
            AttributeType: S
        KeySchema:
          - AttributeName: day
            KeyType: HASH
          - AttributeName: timestamp_ms
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.OTHER_TWEETS_TABLE}

    TrumpsEnrichedTweetsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: day
            AttributeType: S
          - AttributeName: timestamp_ms
            AttributeType: S
        KeySchema:
          - AttributeName: day
            KeyType: HASH
          - AttributeName: timestamp_ms
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TRUMPS_ENRICHED_TWEETS_TABLE}

    PeriodicCloutReportsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: day
            AttributeType: S
          - AttributeName: timestamp_ms
            AttributeType: S
        KeySchema:
          - AttributeName: day
            KeyType: HASH
          - AttributeName: timestamp_ms
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PERIODIC_CLOUT_REPORTS_TABLE}
    # Outputs:
    #   NewServiceExport:
    #     Value: 'A Value To Export'
    #     Export:
    #       Name: 'ksf'
    # Outputs:
    #   ApiUrl:
    #     Description: 'The API Gateway URL'
    #     Value:
    #       Fn::Join:
    #         - ''
    #         - - 'https://'
    #           - Ref: ApiGatewayRestApi
    #           - '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}'
