# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: process-tweets

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  twitter2kinesis-arn: arn:aws:kinesis:us-east-1:525842372805:stream/twitter
  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: true
  #   migration:
  # dir: offline/migrations

provider:
  name: aws
  runtime: nodejs8.10
  # environment:
  #   DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

# you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: 'Allow'
    Action":
      - 'kinesis:*'
    Resource: ${self:custom.twitter2kinesis-arn}
  - Effect: Allow
    # Action:
    #   - dynamodb:Query
    #   - dynamodb:Scan
    #   - dynamodb:GetItem
    #   - dynamodb:PutItem
    #   - dynamodb:UpdateItem
    #   - dynamodb:DeleteItem
    # Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  hello:
    handler: handler.hello
    events:
      - stream:
          type: kinesis
          arn: ${self:custom.twitter2kinesis-arn}
          batchSize: 200
          startingPosition: LATEST
          enabled: false
      # arn:aws:kinesis:us-east-1:525842372805:stream/twitter
    # events:
    #   - stream:
    #     type: kinesis
    #     arn: arn:aws:kinesis:us-east-1:525842372805:stream/twitter
    #     batchSize: 10
    #     startingPosition: LATEST
    #     enabled: true
  # events:
  # - http:
  #     path: users/create
  #     method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
